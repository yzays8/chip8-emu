#pragma once

#include <array>
#include <SDL2/SDL.h>

const uint8_t kSprites[80] = {
  0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
  0x20, 0x60, 0x20, 0x20, 0x70, // 1
  0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
  0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
  0x90, 0x90, 0xF0, 0x10, 0x10, // 4
  0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
  0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
  0xF0, 0x10, 0x20, 0x40, 0x40, // 7
  0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
  0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
  0xF0, 0x90, 0xF0, 0x90, 0x90, // A
  0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
  0xF0, 0x80, 0x80, 0x80, 0xF0, // C
  0xE0, 0x90, 0x90, 0x90, 0xE0, // D
  0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
  0xF0, 0x80, 0xF0, 0x80, 0x80, // F
};

class Graphic {
 public:
  Graphic();
  ~Graphic();
  void InitializeWindow(const int window_scale);
  void Render();
  void ChangeObjectColor(uint8_t r, uint8_t g, uint8_t b);
  void ChangeBackGroundColor(uint8_t r, uint8_t g, uint8_t b);
  void Terminate();
  std::array<std::array<bool, 64>, 32>& GetBuffer();

 private:
  struct Color {
    uint8_t r, g, b;
  };

  std::array<std::array<bool, 64>, 32> frame_buffer_;
  int window_scale_;
  Color obj_rgb_, bg_rgb_;
  SDL_Window *window_;
  SDL_Renderer *renderer_;
  SDL_Rect pixel_;
};